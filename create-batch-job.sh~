#!/bin/bash

# Function to print the time delta
print_time_delta() {
    echo "Time Delta: $1 seconds"
    echo "-------------------"
    echo ""
}

# Function to execute C program and calculate time delta
execute_c_program() {
    local filename=$1
    local size=$2
    local num_threads=$3
    local flag=$4
    local extra_flags=""

    case "$flag" in
        "fopenmp") extra_flags="-fopenmp" ;;
        "lpthread") extra_flags="-lpthread" ;;
    esac

    echo ""
    echo "------------------"
    echo ""
    echo "Beginning C Program: $filename with size $size and threads $num_threads"
    echo ""
    echo "------------------"
    echo ""

    start_time=$(date +%s%N) # nanoseconds

    gcc -o program "$filename" $extra_flags && ./program "$size" "$num_threads"

    end_time=$(date +%s%N) # nanoseconds

    time_delta=$(echo "scale=4; ($end_time - $start_time) / 1000000000" | bc)
    echo "Execution Time: $time_delta seconds"
}

# Function to execute Python script and calculate time delta
execute_python_script() {
    local filename=$1
    local size=$2
    local num_threads=$3

    echo ""
    echo "------------------"
    echo ""
    echo "Beginning Python Script: $filename with size $size and threads $num_threads"
    echo ""
    echo "------------------"
    echo ""

    start_time=$(date +%s%N) # nanoseconds

    python "$filename" "$size" "$num_threads"

    end_time=$(date +%s%N) # nanoseconds

    time_delta=$(echo "scale=4; ($end_time - $start_time) / 1000000000" | bc)
    echo "Execution Time: $time_delta seconds"
}

# Check if input is a number. If not, exit the script.
validate_number() {
    if ! [[ "$1" =~ ^[0-9]+$ ]] || [ "$1" -le 0 ]; then
        echo "Error: Input is not a valid positive number. Exiting the script."
        exit 1
    fi
}

# Parse command-line arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --job-name)
            job_name="$2"
            shift 2
            ;;
        --nodes)
            nodes="$2"
            shift 2
            ;;
        --ntasks-per-node)
            tasks_per_node="$2"
            shift 2
            ;;
        --cores-per-task)
            cores_per_task="$2"
            shift 2
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

# Validate required arguments
if [[ -z $job_name || -z $nodes || -z $tasks_per_node || -z $cores_per_task ]]; then
    echo "Usage: $0 --job-name <job_name> --nodes <num_nodes> --ntasks-per-node <num_tasks> --cores-per-task <num_cores>"
    exit 1
fi

# Validate number of tasks and cores per task
validate_number "$nodes"
validate_number "$tasks_per_node"
validate_number "$cores_per_task"

# Submit the Slurm batch job
echo "Submitting Slurm batch job..."
sbatch <<EOF
#!/bin/bash
#SBATCH --job-name=$job_name
#SBATCH --nodes=$nodes
#SBATCH --ntasks-per-node=$tasks_per_node
#SBATCH --cpus-per-task=$cores_per_task
#SBATCH --time=1:00:00

# Load any necessary modules
# module load <module_name>

# Execute your program here
# ./program
EOF

